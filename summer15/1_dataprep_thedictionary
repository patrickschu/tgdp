#make a dictionary ("dicti") that collects all files per speaker

files=os.listdir("test")

for fili in files:
	speakerextract=re.compile("(\d)-(\d+)-(\d+)-(\d+)")
	speaker=speakerextract.findall(fili)[0][1]
	print speaker
	if speaker not in dicti:
		dicti[speaker]=[fili]
		print "adding", speaker
	else:
		dicti[str(speaker)].append(fili)


##sorting the dictionary entries so we get them in chronological order, put them in dicti1

sorter=re.compile("-(\d+)-a.eaf")

for thing in dicti:
	try:
		entry=dicti[thing]
		dicti1[thing]=sorted(entry, key=lambda item: int(sorter.findall(item)[0]))
	except IndexError, err:
		print thing, err
		

#go thru dicti1, finding the relevant tier to extract the data from. For now, we are only looking at the speaker
#we write those into a file called "tierstoextract". All the relevant data for each dicti1 entry will be written
#to a file called entry+"_testi.txt". It is supposed to output metadata, files and tiers well be working with for the actual extraction

f=open("tierstoextract_76.txt", "a")


for entry in dicti1:
	#setting up output remember to change to unicode
	outputfile=open(str(entry)+"_testi.txt", "w")
	#set up lists we will need later
	filelist=dicti1[entry]
	authors=[]
	dates=[]
	tierslist=[]
	parents=[]
	for fili in filelist:
		#making the pympi file
		filecontent=pympi.Elan.Eaf("test//"+fili)
		#extracting relevant data
		author=filecontent.annotation_document['AUTHOR']
		date=filecontent.annotation_document['DATE']
		tiers=filecontent.get_tier_names()
		#okay we eliminate all tiers that have parents and keep those that include the entry, i.e. the speaker number we are currently collecting
		parenttiers=[i for i in filecontent.get_tier_names() if "PARENT_REF" not in filecontent.get_parameters_for_tier(i) and str(entry) in i.lower()]
		#we need different procedures depending on how many results the first extraction method gives us.
		#zeros work
		if len(parenttiers) == 0:
			parenttiers=[i for i in filecontent.get_tier_names() if "PARENT_REF" not in filecontent.get_parameters_for_tier(i) and "speaker" in i.lower() and "speaker 2" not in i.lower() and "speaker 3" not in i.lower() and "speaker x" not in i.lower() and "translation" not in i.lower() and "codeswitching" not in i.lower()and "comment" not in i.lower() and "ipa" not in i.lower()]
			f.write(str(entry)+"\t"+str(fili)+"\t"+str(parenttiers)+"\n")
		if len(parenttiers) == 1:
		       f.write(str(entry)+"\t"+str(fili)+"\t"+str(parenttiers)+"\n")
		#2 works
		if len(parenttiers) == 2:
			parenttiers=[i for i in parenttiers if "speaker" in i.lower() and "translation" not in i.lower() and "ipa" not in i.lower() and "husband" not in i.lower() and "comment" not in i.lower() and "code" not in i.lower() and "b" not in i.lower()]
			f.write(str(entry)+"\t"+str(fili)+"\t"+str(parenttiers)+"\n")
		#multis work
		if len(parenttiers) > 2:
			parenttiers=[i for i in parenttiers if "speaker" in i.lower() and "code" not in i.lower() and "ipa" not in i.lower() and "comment" not in i.lower() and "35b" not in i.lower()]
			f.write(str(entry)+"\t"+str(fili)+"\t"+str(parenttiers)+"\n")
		#getting all the data into one list for output
		authors.append(author)
		dates.append(date)
		tierslist.append(tiers)
		parents.append(parenttiers)
	outputfile.write("authors:"+str(set(authors))+"\ndates:"+str(set(dates))+"\ncomplete tiers:"+str(tierslist)+"\nparenttiers:"+str(parents))
	outputfile.close()
	

